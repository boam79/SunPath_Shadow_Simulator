/**
 * Data export utilities (CSV, JSON)
 */

import type { SolarCalculationResponse } from './api';

/**
 * Convert solar data to CSV format
 */
export function exportToCSV(data: SolarCalculationResponse, filename?: string): void {
  // CSV Header
  const headers = [
    'Timestamp',
    'Date',
    'Time',
    'Sun Altitude (°)',
    'Sun Azimuth (°)',
    'Sun Zenith (°)',
    'GHI (W/m²)',
    'DNI (W/m²)',
    'DHI (W/m²)',
    'PAR (W/m²)',
    'Shadow Length (m)',
    'Shadow Direction (°)'
  ];

  // CSV Rows
  const rows = data.series.map(point => {
    const timestamp = new Date(point.timestamp);
    const dateStr = timestamp.toLocaleDateString('ko-KR');
    const timeStr = timestamp.toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit' });

    return [
      point.timestamp,
      dateStr,
      timeStr,
      point.sun.altitude.toFixed(4),
      point.sun.azimuth.toFixed(4),
      point.sun.zenith.toFixed(4),
      point.irradiance?.ghi.toFixed(2) || '',
      point.irradiance?.dni.toFixed(2) || '',
      point.irradiance?.dhi.toFixed(2) || '',
      point.irradiance?.par?.toFixed(2) || '',
      typeof point.shadow?.length === 'number' 
        ? (point.shadow.length === Infinity ? 'Infinite' : point.shadow.length.toFixed(2))
        : '',
      typeof point.shadow?.direction === 'number' ? point.shadow.direction.toFixed(2) : ''
    ];
  });

  // Create CSV content
  const csvContent = [
    headers.join(','),
    ...rows.map(row => row.join(','))
  ].join('\n');

  // Add BOM for Excel UTF-8 support
  const BOM = '\uFEFF';
  const csvWithBOM = BOM + csvContent;

  // Generate filename
  const date = data.series[0] ? new Date(data.series[0].timestamp).toISOString().split('T')[0] : 'data';
  const defaultFilename = `sunpath_${date}.csv`;

  // Download
  downloadFile(csvWithBOM, filename || defaultFilename, 'text/csv;charset=utf-8;');
}

/**
 * Export data as JSON
 */
export function exportToJSON(data: SolarCalculationResponse, filename?: string): void {
  const jsonContent = JSON.stringify(data, null, 2);

  const date = data.series[0] ? new Date(data.series[0].timestamp).toISOString().split('T')[0] : 'data';
  const defaultFilename = `sunpath_${date}.json`;

  downloadFile(jsonContent, filename || defaultFilename, 'application/json');
}

/**
 * Export summary as text
 */
export function exportSummary(data: SolarCalculationResponse, filename?: string): void {
  const summary = `
SunPath & Shadow Simulator - 계산 결과
=======================================

일출: ${new Date(data.summary.sunrise).toLocaleString('ko-KR')}
일몰: ${new Date(data.summary.sunset).toLocaleString('ko-KR')}
정오: ${new Date(data.summary.solar_noon).toLocaleString('ko-KR')}

일조 시간: ${data.summary.day_length.toFixed(2)}시간
최대 태양 고도: ${data.summary.max_altitude.toFixed(2)}°
총 일사량: ${data.summary.total_irradiance?.toFixed(2) || 'N/A'} kWh/m²

데이터 포인트: ${data.series.length}개
계산 시각: ${data.metadata.timestamp}
정확도: ±${data.metadata.accuracy.position}° (위치), ±${data.metadata.accuracy.irradiance}% (일사량)

===================================
Generated by SunPath & Shadow Simulator v${data.metadata.version}
  `.trim();

  const date = data.series[0] ? new Date(data.series[0].timestamp).toISOString().split('T')[0] : 'data';
  const defaultFilename = `sunpath_summary_${date}.txt`;

  downloadFile(summary, filename || defaultFilename, 'text/plain');
}

/**
 * Download file helper
 */
function downloadFile(content: string, filename: string, mimeType: string): void {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

/**
 * Copy data to clipboard as JSON
 */
export async function copyToClipboard(data: SolarCalculationResponse): Promise<boolean> {
  try {
    const jsonString = JSON.stringify(data, null, 2);
    await navigator.clipboard.writeText(jsonString);
    return true;
  } catch (error) {
    console.error('Failed to copy to clipboard:', error);
    return false;
  }
}
